
import random
import speech_recognition as sr
from googletrans import Translator
import sounddevice as sd
from scipy.io.wavfile import write
import time
import os
import wave
import struct

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
translator = Translator()
recognizer = sr.Recognizer()
words_db = {
    'easy': ['—è–±–ª–æ–∫–æ', '–¥–æ–º', '–∫–æ—Ç', '—Å–æ–±–∞–∫–∞', '–∫–Ω–∏–≥–∞', '–≤–æ–¥–∞', '—Å–æ–ª–Ω—Ü–µ', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–æ–∫–Ω–æ'],
    'medium': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–µ–±–∞–≥–≥–∏–Ω–≥'],
    'hard': ['–∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å', '–±–ª–æ–∫—á–µ–π–Ω', '–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π', '–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å', '–≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è', '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è']
}

def show_welcome():
    print("""
    üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"! üéâ
    =========================================
    –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:
    1. –¢–µ–±–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    2. –¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    3. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø–∏—à–µ—Ç —Ç–≤–æ–π –≥–æ–ª–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    4. –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏
    5. –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—á–∫–∏:
       - –õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: 1 –±–∞–ª–ª
       - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: 2 –±–∞–ª–ª–∞
       - –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: 3 –±–∞–ª–ª–∞
    
    üèÜ –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤! üèÜ
    """)

def save_wav(file_path, data, sample_rate):
    with wave.open(file_path, 'wb') as wav_file:
        wav_file.setnchannels(1)
        wav_file.setsampwidth(2)
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(struct.pack('h' * len(data), *data))

def record_audio(duration=3, fs=44100):
    time.sleep(5)
    print("\nüé§ –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å...")
    try:
        recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16')
        sd.wait()
        save_wav('output.wav', recording.flatten(), fs)
        print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        return False

def recognize_speech():
    try:
        with sr.AudioFile('output.wav') as source:
            audio = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio, language='en-US')
            print(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
            return text.lower()
        except sr.UnknownValueError:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return None
        except sr.RequestError:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        return None

def check_translation(russian_word, english_attempt):
    try:
        correct_translation = translator.translate(russian_word, src='ru', dest='en').text.lower()
        return english_attempt == correct_translation, correct_translation
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return False, ""

def select_difficulty():
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    print("1 - –õ–µ–≥–∫–∏–π (–ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞)")
    print("2 - –°—Ä–µ–¥–Ω–∏–π (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)")
    print("3 - –°–ª–æ–∂–Ω—ã–π (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ä–º–∏–Ω—ã)")
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
        if choice in ['1', '2', '3']:
            return ['easy', 'medium', 'hard'][int(choice)-1]
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

def play_game():
    show_welcome()
    difficulty = select_difficulty()
    lives = 3
    score = 0
    words = words_db[difficulty].copy()
    random.shuffle(words)
    
    multiplier = {'easy': 1, 'medium': 2, 'hard': 3}[difficulty]
    
    for word in words:
        if lives <= 0:
            break
            
        print(f"\n{'='*30}")
        print(f"üí° –°–ª–æ–≤–æ: {word}")
        print(f"‚ù§Ô∏è –ñ–∏–∑–Ω–∏: {'‚ô•' * lives}")
        print(f"üèÜ –û—á–∫–∏: {score}")
        print(f"üìä –£—Ä–æ–≤–µ–Ω—å: {difficulty.capitalize()} (x{multiplier})")
        
        if not record_audio():
            lives -= 1
            print("‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏")
            continue
            
        attempt = recognize_speech()
        
        if attempt:
            is_correct, correct = check_translation(word, attempt)
            if is_correct:
                points = 1 * multiplier
                score += points
                print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{points} –±–∞–ª–ª–æ–≤!")
                print(f"üéØ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥: {attempt} (–≤–µ—Ä–Ω–æ: {correct})")
            else:
                lives -= 1
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! -1 –∂–∏–∑–Ω—å")
                print(f"üéØ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥: {attempt} (–≤–µ—Ä–Ω–æ: {correct})")
        else:
            lives -= 1
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è! -1 –∂–∏–∑–Ω—å")
        
        time.sleep(1)
    
    print("\n" + "="*30)
    print("üî• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üî•")
    print(f"üèÜ –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}")
    print(f"üíØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—á–µ—Ç: {len(words_db[difficulty]) * multiplier}")
    
    if lives <= 0:
        print("üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
    else:
        print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞!")
    
    if score >= len(words_db[difficulty]) * multiplier * 0.8:
        print("üèÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞!")
    elif score >= len(words_db[difficulty]) * multiplier * 0.5:
        print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ—â–µ!")
    else:
        print("üëé –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!")

if __name__ == "__main__":
    try:
        play_game()
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists('output.wav'):
            os.remove('output.wav')
